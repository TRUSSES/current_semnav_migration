<!--
MIT License (modified)

Copyright (c) 2020 The Trustees of the University of Pennsylvania
Authors:
Vasileios Vasilopoulos <vvasilo@seas.upenn.edu>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this **file** (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
-->

<launch>
	<!-- ARGUMENTS FOR NAMESPACES -->
	<arg name="pose_tracking"							default="pose_tracking"/>
	<arg name="sensor_integration"						default="sensor_integration"/>
	<arg name="transforms"								default="transforms"/>

	<!-- ARGUMENTS FOR TOPICS AND FRAMES -->
	<!-- Stereo camera -->
	<arg name="stereo_camera_rgb"						default="/zed/zed_node/rgb/image_rect_color"/>								<!-- Check your stereo camera -->
	<arg name="stereo_camera_rgb_info"					default="/zed/zed_node/rgb/camera_info"/>									<!-- Check your stereo camera -->

	<!-- Object detection -->
	<arg name="detection_topic"							default="detected_objects"/>										<!-- Check object detector -->
	<arg name="object_poses_topic"						default="static_object_detections"/>								<!-- Check object detector -->
	<arg name="mesh_location"							default="$(find object_pose_keypoint_optimizer)/models/meshes/"/>	<!-- Check object detector -->

	<!-- Frame names -->
	<arg name="stereo_camera_frame"						default="/base_link"/>										<!-- Check your stereo camera -->
	<arg name="robot_frame"								default="/turtlebot"/>												<!-- Check Vicon -->
	<arg name="lidar_frame"								default="/laser"/>
	<arg name="odom_frame"								default="/odom"/>
	<arg name="map_frame"								default="/map"/>
	<arg name="object_frame"							default="/object0"/>

	<!-- Laserscan sparsifier -->
	<arg name="lidar_scan_raw_topic"					default="lidar_scan_raw"/>
	<arg name="lidar_scan_sparse_topic"					default="lidar_scan"/>

	<!-- Teleop parameter -->
	<arg name="teleop"									default="true"/>


	<!-- Launch the ZED camera and ignore its odometry --> 
	<include file = "$(find zed_wrapper)/launch/zed_no_tf.launch"/>

	<!-- Launch Vicon -->
	<!-- Make sure to set publish_tf to true in this launch file and change the fixed_frame_id to the odom frame name -->
	<include file = "$(find mocap_vicon)/launch/vicon.launch"/>

	<!-- Launch the kobuki_node -->
	<include file = "$(find kobuki_node)/launch/minimal.launch" ns="kobuki">
		<arg name="kobuki_publish_tf"					value="false"/>
	</include>

	<!-- Launch kobuki teleop -->
	<group if="$(arg teleop)">
		<include file = "$(find kobuki_keyop)/launch/safe_keyop.launch" ns="kobuki"/>
	</group>

	<!-- Define the (identity) transform between the odom frame and the map frame -->
	<node pkg="tf" type="static_transform_publisher" name="odom_to_map" ns="$(arg transforms)" args="0 0 0 0 0 0 $(arg map_frame) $(arg odom_frame) 5" />

	<!-- Define the transform between the ZED frame and the robot frame -->
	<node pkg="tf" type="static_transform_publisher" name="cam_to_robot" ns="$(arg transforms)" args="0.08 -0.03 0 0 0 0 $(arg robot_frame) $(arg stereo_camera_frame) 5" />

	<!-- Define the transform between the LIDAR frame and the robot frame -->
	<node pkg="tf" type="static_transform_publisher" name="lidar_to_robot" ns="$(arg transforms)" args="0 0 0 0 0 0 $(arg robot_frame) $(arg lidar_frame) 5" />

	<!-- Define the transform between the (fake) object frame and the map frame -->
	<node pkg="tf" type="static_transform_publisher" name="object_to_map" ns="$(arg transforms)" args="-1.5 0 0 0 0 0 $(arg map_frame) $(arg object_frame) 5" />

	<!-- Launch LIDAR sensor -->
	<node pkg="urg_node" type="urg_node" name="lidar_node" ns="$(arg sensor_integration)" output="screen">
		<remap from="scan"								to="$(arg lidar_scan_raw_topic)"/>

		<param name="frame_id"							value="$(arg lidar_frame)"/>
	</node>

	<!-- Launch laserscan sparsifier to downsample the sensor LIDAR data -->
	<node pkg="laser_scan_sparsifier" type="laser_scan_sparsifier_node" name="laserscan_sparsifier_lidar" ns="$(arg sensor_integration)" output="screen">
		<remap from="scan"								to="$(arg lidar_scan_raw_topic)"/>
		<remap from="scan_sparse"						to="$(arg lidar_scan_sparse_topic)"/>

		<!-- Sparsifier downsampling ratio -->
		<param name="target_size"       				value="101"/>
	</node>
</launch>
